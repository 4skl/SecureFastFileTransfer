<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/skl/securefastfiletransfer/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/skl/securefastfiletransfer/MainActivity.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.skl.securefastfiletransfer&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.content.Context&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import java.util.UUID&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.text.style.TextAlign&#10;import java.io.File&#10;import android.content.BroadcastReceiver&#10;import android.content.IntentFilter&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.graphics.Bitmap&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import com.journeyapps.barcodescanner.ScanContract&#10;import com.journeyapps.barcodescanner.ScanOptions&#10;import androidx.core.content.ContextCompat&#10;import android.content.pm.PackageManager&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.ui.platform.LocalClipboardManager&#10;import androidx.compose.ui.text.AnnotatedString&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ContentCopy&#10;import androidx.compose.material.icons.filled.Folder&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.runtime.Composable&#10;&#10;class MainActivity : ComponentActivity(), WiFiTransferHelper.TransferListener {&#10;    private lateinit var wifiTransferHelper: WiFiTransferHelper&#10;    private var handshakeSecret: String? = null&#10;    private var isSender = false&#10;    private var showConfirmDialog by mutableStateOf(false)&#10;    private var status by mutableStateOf(&quot;Ready to start secure file transfer&quot;)&#10;    private var selectedFileUri: Uri? = null&#10;    private var selectedSaveDirectory: Uri? = null&#10;    private var peerIpAddress: String? = null&#10;    private var waitingForSecret by mutableStateOf(false)&#10;    private var displayedSecret by mutableStateOf(&quot;&quot;)&#10;    private var showQRCode by mutableStateOf(false)&#10;    private var qrCodeBitmap by mutableStateOf&lt;Bitmap?&gt;(null)&#10;    private var showManualSecretDialog by mutableStateOf(false)&#10;    private var manualSecretInput by mutableStateOf(&quot;&quot;)&#10;    private var showFileReceivedDialog by mutableStateOf(false)&#10;    private var receivedFilePath by mutableStateOf(&quot;&quot;)&#10;    private var showPermissionDialog by mutableStateOf(false)&#10;    private var showAboutDialog by mutableStateOf(false)&#10;    private var isSearchingDevices by mutableStateOf(false)&#10;&#10;    // Permission request launcher&#10;    private val permissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestMultiplePermissions()&#10;    ) { permissions -&gt;&#10;        val allGranted = permissions.values.all { it }&#10;        if (!allGranted) {&#10;            Toast.makeText(this, &quot;Permissions are required for file transfer&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    // Directory picker launcher for receiver&#10;    private val directoryPickerLauncher = registerForActivityResult(&#10;        ActivityResultContracts.OpenDocumentTree()&#10;    ) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            selectedSaveDirectory = uri&#10;            // Grant persistent permission&#10;            contentResolver.takePersistableUriPermission(&#10;                uri,&#10;                Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION&#10;            )&#10;            status = &quot;Save directory selected. Ready to scan QR code or enter secret.&quot;&#10;            waitingForSecret = true&#10;        } else {&#10;            Toast.makeText(this, &quot;Please select a directory to save received files&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    // QR Code scanner launcher&#10;    private val qrScannerLauncher = registerForActivityResult(ScanContract()) { result -&gt;&#10;        if (result.contents != null) {&#10;            val scannedSecret = result.contents&#10;            if (QRCodeHelper.isValidSecret(scannedSecret)) {&#10;                handshakeSecret = scannedSecret&#10;                displayedSecret = scannedSecret&#10;                status = &quot;Secret scanned! Connecting to sender...&quot;&#10;                waitingForSecret = false&#10;                startWifiTransfer()&#10;            } else {&#10;                Toast.makeText(this, &quot;Invalid QR code. Please scan a valid secret code.&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        } else {&#10;            Toast.makeText(this, &quot;QR code scan cancelled&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private val fileTransferReceiver = object : BroadcastReceiver() {&#10;        override fun onReceive(context: Context?, intent: Intent?) {&#10;            if (intent?.action == &quot;com.skl.securefastfiletransfer.FILE_TRANSFER_COMPLETE&quot;) {&#10;                val success = intent.getBooleanExtra(&quot;success&quot;, false)&#10;                val message = intent.getStringExtra(&quot;message&quot;) ?: &quot;Unknown result&quot;&#10;                val filePath = intent.getStringExtra(&quot;file_path&quot;)&#10;&#10;                runOnUiThread {&#10;                    isSearchingDevices = false&#10;                    status = message&#10;                    if (success) {&#10;                        if (!isSender &amp;&amp; filePath != null) {&#10;                            // Show file received dialog for receiver&#10;                            receivedFilePath = filePath&#10;                            showFileReceivedDialog = true&#10;                        }&#10;                        Toast.makeText(this@MainActivity, &quot;Transfer completed successfully!&quot;, Toast.LENGTH_LONG).show()&#10;                        resetToIdle()&#10;                    } else {&#10;                        Toast.makeText(this@MainActivity, &quot;Transfer failed: $message&quot;, Toast.LENGTH_LONG).show()&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private val pickFileLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? -&gt;&#10;        if (uri != null) {&#10;            selectedFileUri = uri&#10;            val fileName = getFileNameFromUri(this, uri)&#10;            // Generate secret immediately when file is selected&#10;            val generatedSecret = UUID.randomUUID().toString()&#10;            handshakeSecret = generatedSecret&#10;            displayedSecret = generatedSecret&#10;            status = &quot;File selected: $fileName. Share the QR code or secret with receiver.&quot;&#10;&#10;            // Generate QR code&#10;            qrCodeBitmap = QRCodeHelper.generateQRCode(generatedSecret, 400)&#10;            showQRCode = true&#10;        }&#10;    }&#10;&#10;    @SuppressLint(&quot;UnspecifiedRegisterReceiverFlag&quot;)&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        wifiTransferHelper = WiFiTransferHelper(this)&#10;&#10;        // Register broadcast receiver for file transfer updates&#10;        val filter = IntentFilter(&quot;com.skl.securefastfiletransfer.FILE_TRANSFER_COMPLETE&quot;)&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            registerReceiver(fileTransferReceiver, filter, Context.RECEIVER_NOT_EXPORTED)&#10;        } else {&#10;            @Suppress(&quot;DEPRECATION&quot;)&#10;            registerReceiver(fileTransferReceiver, filter)&#10;        }&#10;&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            MainContent()&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    private fun MainContent() {&#10;        MaterialTheme {&#10;            val clipboardManager = LocalClipboardManager.current&#10;            &#10;            Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .padding(innerPadding)&#10;                        .padding(16.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot; Secure File Transfer&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        textAlign = TextAlign.Center,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;&#10;                    // Information card explaining how to use the app&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.tertiaryContainer)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp)&#10;                        ) {&#10;                            Text(&#10;                                text = &quot; How it works:&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;• Send: Select file → Share QR code/secret → Wait for receiver → Confirm transfer\n&quot; +&#10;                                        &quot;• Receive: Select save folder → Scan QR/Enter secret → Confirm → File received securely\n&quot; +&#10;                                        &quot;• All files are encrypted with AES-256 during transfer&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onTertiaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            TextButton(&#10;                                onClick = { showAboutDialog = true }&#10;                            ) {&#10;                                Text(&quot;Learn more about security features&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Status card with search indicator&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.Center&#10;                        ) {&#10;                            if (isSearchingDevices) {&#10;                                CircularProgressIndicator(&#10;                                    modifier = Modifier.size(20.dp),&#10;                                    strokeWidth = 2.dp,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                            }&#10;                            Text(&#10;                                text = if (isSearchingDevices) &quot; Searching for devices...&quot; else status,&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = {&#10;                            isSender = true&#10;                            resetState()&#10;                            status = &quot;Select a file to send&quot;&#10;                            pickFileLauncher.launch(&quot;*/*&quot;)&#10;                        },&#10;                        enabled = !waitingForSecret &amp;&amp; !isSearchingDevices&#10;                    ) {&#10;                        Text(&quot; Send File&quot;)&#10;                    }&#10;&#10;                    Button(&#10;                        onClick = {&#10;                            isSender = false&#10;                            resetState()&#10;                            status = &quot;Select a directory to save received files&quot;&#10;                            // Open directory picker for receiver&#10;                            directoryPickerLauncher.launch(null)&#10;                        },&#10;                        enabled = !waitingForSecret &amp;&amp; !isSearchingDevices&#10;                    ) {&#10;                        Text(&quot; Receive File&quot;)&#10;                    }&#10;&#10;                    if (displayedSecret.isNotEmpty()) {&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot; Secret Code:&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                &#10;                                // Selectable secret text with copy button&#10;                                Card(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)&#10;                                ) {&#10;                                    Row(&#10;                                        modifier = Modifier.padding(12.dp),&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        SelectionContainer(&#10;                                            modifier = Modifier.weight(1f)&#10;                                        ) {&#10;                                            Text(&#10;                                                text = handshakeSecret ?: &quot;&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall,&#10;                                                fontWeight = FontWeight.Medium,&#10;                                                color = MaterialTheme.colorScheme.onSurface,&#10;                                                textAlign = TextAlign.Center&#10;                                            )&#10;                                        }&#10;                                        IconButton(&#10;                                            onClick = {&#10;                                                clipboardManager.setText(AnnotatedString(handshakeSecret ?: &quot;&quot;))&#10;                                                Toast.makeText(this@MainActivity, &quot;Secret copied to clipboard&quot;, Toast.LENGTH_SHORT).show()&#10;                                            }&#10;                                        ) {&#10;                                            Icon(&#10;                                                imageVector = Icons.Default.ContentCopy,&#10;                                                contentDescription = &quot;Copy secret&quot;,&#10;                                                tint = MaterialTheme.colorScheme.primary&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                                &#10;                                Spacer(modifier = Modifier.height(8.dp))&#10;                                Text(&#10;                                    text = &quot;Share this secret with the receiver device!&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    textAlign = TextAlign.Center,&#10;                                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                                )&#10;&#10;                                if (isSender &amp;&amp; qrCodeBitmap != null) {&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Button(&#10;                                        onClick = {&#10;                                            showQRCode = true&#10;                                        }&#10;                                    ) {&#10;                                        Text(&quot; Show QR Code&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Scan QR Code button for receivers&#10;                    if (waitingForSecret) {&#10;                        Button(&#10;                            onClick = {&#10;                                val options = ScanOptions().apply {&#10;                                    setPrompt(&quot;Scan the sender's QR code&quot;)&#10;                                    setBeepEnabled(true)&#10;                                    setOrientationLocked(false) // Allow rotation for better scanning&#10;                                    setBarcodeImageEnabled(true)&#10;                                    setDesiredBarcodeFormats(ScanOptions.QR_CODE)&#10;                                    setCameraId(0) // Use back camera&#10;                                    setTimeout(30000) // 30 second timeout&#10;                                }&#10;                                qrScannerLauncher.launch(options)&#10;                            }&#10;                        ) {&#10;                            Text(&quot; Scan QR Code&quot;)&#10;                        }&#10;                    }&#10;&#10;                    if (waitingForSecret) {&#10;                        Button(&#10;                            onClick = {&#10;                                // Manual secret input&#10;                                showManualSecretDialog = true&#10;                            }&#10;                        ) {&#10;                            Text(&quot;⌨️ Enter Secret Manually&quot;)&#10;                        }&#10;                    }&#10;&#10;                    // All the existing dialogs...&#10;                    ShowDialogs(clipboardManager)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    private fun ShowDialogs(clipboardManager: androidx.compose.ui.platform.ClipboardManager) {&#10;        // Show all the dialogs: confirm, QR, manual secret, file received, permissions, about&#10;        if (showConfirmDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = {},&#10;                title = {&#10;                    Text(&#10;                        if (isSender) &quot; Ready to Send File&quot; else &quot; Ready to Receive File&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&#10;                            text = if (isSender) {&#10;                                &quot;Connected to receiver device! Verify the secret codes match on both screens before proceeding.&quot;&#10;                            } else {&#10;                                &quot;Connected to sender device! Verify the secret codes match on both screens before proceeding.&quot;&#10;                            },&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        // Show secret key for verification&#10;                        Text(&#10;                            text = &quot; Secret Key:&quot;,&#10;                            style = MaterialTheme.typography.titleSmall,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                        ) {&#10;                            SelectionContainer {&#10;                                Text(&#10;                                    text = handshakeSecret ?: &quot;&quot;,&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    textAlign = TextAlign.Center,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        if (!isSender) {&#10;                            Card(&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;⚠️ RECEIVER: Please confirm first to prepare for file reception&quot;,&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.primary,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        } else {&#10;                            Card(&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondaryContainer)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot; SENDER: Wait for receiver to confirm first, then confirm to start sending&quot;,&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    color = MaterialTheme.colorScheme.secondary,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        showConfirmDialog = false&#10;                        startFileTransfer()&#10;                    }) {&#10;                        Text(if (isSender) &quot;✅ Start Sending&quot; else &quot;✅ Ready to Receive&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(onClick = {&#10;                        showConfirmDialog = false&#10;                        resetToIdle()&#10;                    }) { Text(&quot;❌ Cancel&quot;) }&#10;                }&#10;            )&#10;        }&#10;&#10;        if (showQRCode) {&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showQRCode = false&#10;                },&#10;                title = { &#10;                    Text(&#10;                        &quot; Share QR Code&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    ) &#10;                },&#10;                text = {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            text = &quot;Show this QR code to the receiver to share the secret.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        // QR code image&#10;                        qrCodeBitmap?.let { bitmap -&gt;&#10;                            Card(&#10;                                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)&#10;                            ) {&#10;                                Image(&#10;                                    bitmap = bitmap.asImageBitmap(),&#10;                                    contentDescription = &quot;QR Code&quot;,&#10;                                    modifier = Modifier&#10;                                        .size(250.dp)&#10;                                        .padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        // Show the actual secret key text&#10;                        Text(&#10;                            text = &quot; Secret Key:&quot;,&#10;                            style = MaterialTheme.typography.titleSmall,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceVariant)&#10;                        ) {&#10;                            SelectionContainer {&#10;                                Text(&#10;                                    text = handshakeSecret ?: &quot;&quot;,&#10;                                    modifier = Modifier.padding(8.dp),&#10;                                    style = MaterialTheme.typography.bodySmall,&#10;                                    textAlign = TextAlign.Center,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        showQRCode = false&#10;                        // Start WiFi transfer after showing QR code&#10;                        startWifiTransfer()&#10;                    }) { Text(&quot;✅ Continue&quot;) }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(onClick = {&#10;                        showQRCode = false&#10;                        resetToIdle()&#10;                    }) { Text(&quot;❌ Cancel&quot;) }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Continue with other dialogs...&#10;        if (showManualSecretDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showManualSecretDialog = false&#10;                },&#10;                title = { &#10;                    Text(&#10;                        &quot;⌨️ Enter Secret Manually&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    ) &#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;Enter the complete secret code from the sender's device.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        // Text field for manual secret input&#10;                        TextField(&#10;                            value = manualSecretInput,&#10;                            onValueChange = { manualSecretInput = it },&#10;                            label = { Text(&quot;Secret Code&quot;) },&#10;                            singleLine = true,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        // Verify and proceed with manual secret&#10;                        if (manualSecretInput.length &gt;= 30) { // UUID length&#10;                            handshakeSecret = manualSecretInput&#10;                            displayedSecret = manualSecretInput&#10;                            status = &quot;Secret received! Connecting to sender...&quot;&#10;                            showManualSecretDialog = false&#10;                            waitingForSecret = false&#10;                            manualSecretInput = &quot;&quot; // Clear the input&#10;                            startWifiTransfer()&#10;                        } else {&#10;                            Toast.makeText(this@MainActivity, &quot;Please enter the complete secret code (should be around 36 characters)&quot;, Toast.LENGTH_LONG).show()&#10;                        }&#10;                    }) { Text(&quot;✅ Confirm Secret&quot;) }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(onClick = {&#10;                        showManualSecretDialog = false&#10;                        manualSecretInput = &quot;&quot; // Clear the input&#10;                        resetToIdle()&#10;                    }) { Text(&quot;❌ Cancel&quot;) }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Show received file dialog&#10;        if (showFileReceivedDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showFileReceivedDialog = false&#10;                },&#10;                title = { &#10;                    Text(&#10;                        &quot; File Received Successfully!&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    ) &#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;The file has been received and decrypted successfully.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        Text(&#10;                            text = &quot; Saved to:&quot;,&#10;                            style = MaterialTheme.typography.titleSmall,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                        // Clickable file path with folder icon&#10;                        Card(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        openFileLocation(receivedFilePath)&#10;                                    }&#10;                                    .padding(12.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Folder,&#10;                                    contentDescription = &quot;Open folder&quot;,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(8.dp))&#10;                                Text(&#10;                                    text = receivedFilePath,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        textDecoration = TextDecoration.Underline&#10;                                    ),&#10;                                    color = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot; Tap the path above to open the file location&quot;,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.secondary,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        showFileReceivedDialog = false&#10;                    }) { Text(&quot;✅ OK&quot;) }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(onClick = {&#10;                        showFileReceivedDialog = false&#10;                        openFileLocation(receivedFilePath)&#10;                    }) { Text(&quot; Open Location&quot;) }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Rest of dialogs (permissions, about)...&#10;        if (waitingForSecret &amp;&amp; !hasRequiredPermissions()) {&#10;            LaunchedEffect(Unit) {&#10;                showPermissionDialog = true&#10;            }&#10;        }&#10;&#10;        if (showPermissionDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showPermissionDialog = false&#10;                },&#10;                title = { &#10;                    Text(&#10;                        &quot; Permissions Required&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    ) &#10;                },&#10;                text = {&#10;                    Text(&#10;                        text = &quot;This app requires certain permissions to be granted for file transfer to work. Please allow the required permissions.&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        showPermissionDialog = false&#10;                        requestRequiredPermissions()&#10;                    }) { Text(&quot;✅ Grant Permissions&quot;) }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(onClick = {&#10;                        showPermissionDialog = false&#10;                        resetToIdle()&#10;                    }) { Text(&quot;❌ Cancel&quot;) }&#10;                }&#10;            )&#10;        }&#10;&#10;        if (showAboutDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = {&#10;                    showAboutDialog = false&#10;                },&#10;                title = { &#10;                    Text(&#10;                        &quot;ℹ️ About Secure File Transfer&quot;,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    ) &#10;                },&#10;                text = {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;This app allows secure file transfer between devices using Wi-Fi Direct and QR codes. Files are encrypted with AES-256 for security.&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;                        &#10;                        Card(&#10;                            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.secondaryContainer)&#10;                        ) {&#10;                            Column(modifier = Modifier.padding(12.dp)) {&#10;                                Text(&#10;                                    text = &quot; Security Features:&quot;,&#10;                                    style = MaterialTheme.typography.titleSmall,&#10;                                    fontWeight = FontWeight.Bold&#10;                                )&#10;                                Spacer(modifier = Modifier.height(4.dp))&#10;                                Text(&#10;                                    text = &quot;• Wi-Fi Direct: Direct device connection without internet\n&quot; +&#10;                                            &quot;• QR Codes: Quick and secure secret key sharing\n&quot; +&#10;                                            &quot;• AES-256 Encryption: Military-grade file encryption\n&quot; +&#10;                                            &quot;• No cloud storage: Files stay on your devices&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall&#10;                                )&#10;                            }&#10;                        }&#10;                        &#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = &quot;Developed by: 4skl&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        )&#10;                    }&#10;                },&#10;                confirmButton = {&#10;                    Button(onClick = {&#10;                        showAboutDialog = false&#10;                    }) { Text(&quot;✅ Close&quot;) }&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Required helper functions&#10;    private fun resetState() {&#10;        handshakeSecret = null&#10;        displayedSecret = &quot;&quot;&#10;        selectedFileUri = null&#10;        peerIpAddress = null&#10;        isSearchingDevices = false&#10;    }&#10;&#10;    private fun resetToIdle() {&#10;        waitingForSecret = false&#10;        showConfirmDialog = false&#10;        status = &quot;Ready to start secure file transfer&quot;&#10;        isSender = false&#10;        resetState()&#10;    }&#10;&#10;    private fun getFileNameFromUri(context: Context, uri: Uri): String? {&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        return cursor?.use {&#10;            if (it.moveToFirst()) {&#10;                val index = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;                if (index &gt;= 0) it.getString(index) else null&#10;            } else null&#10;        }&#10;    }&#10;&#10;    private fun hasRequiredPermissions(): Boolean {&#10;        val requiredPermissions = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            arrayOf(&#10;                Manifest.permission.ACCESS_WIFI_STATE,&#10;                Manifest.permission.CHANGE_WIFI_STATE,&#10;                Manifest.permission.ACCESS_FINE_LOCATION,&#10;                Manifest.permission.NEARBY_WIFI_DEVICES&#10;            )&#10;        } else {&#10;            arrayOf(&#10;                Manifest.permission.ACCESS_WIFI_STATE,&#10;                Manifest.permission.CHANGE_WIFI_STATE,&#10;                Manifest.permission.ACCESS_FINE_LOCATION,&#10;                Manifest.permission.ACCESS_COARSE_LOCATION&#10;            )&#10;        }&#10;        &#10;        return requiredPermissions.all { permission -&gt;&#10;            ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED&#10;        }&#10;    }&#10;&#10;    private fun requestRequiredPermissions() {&#10;        val requiredPermissions = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            arrayOf(&#10;                Manifest.permission.ACCESS_WIFI_STATE,&#10;                Manifest.permission.CHANGE_WIFI_STATE,&#10;                Manifest.permission.ACCESS_FINE_LOCATION,&#10;                Manifest.permission.NEARBY_WIFI_DEVICES&#10;            )&#10;        } else {&#10;            arrayOf(&#10;                Manifest.permission.ACCESS_WIFI_STATE,&#10;                Manifest.permission.CHANGE_WIFI_STATE,&#10;                Manifest.permission.ACCESS_FINE_LOCATION,&#10;                Manifest.permission.ACCESS_COARSE_LOCATION&#10;            )&#10;        }&#10;        &#10;        permissionLauncher.launch(requiredPermissions)&#10;    }&#10;&#10;    private fun openFileLocation(filePath: String) {&#10;        try {&#10;            val file = File(filePath)&#10;            val intent = Intent(Intent.ACTION_VIEW).apply {&#10;                setDataAndType(Uri.fromFile(file.parentFile), &quot;resource/folder&quot;)&#10;                flags = Intent.FLAG_ACTIVITY_NEW_TASK&#10;            }&#10;            &#10;            if (intent.resolveActivity(packageManager) != null) {&#10;                startActivity(intent)&#10;            } else {&#10;                val fileIntent = Intent(Intent.ACTION_VIEW).apply {&#10;                    setDataAndType(Uri.fromFile(file), &quot;*/*&quot;)&#10;                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_GRANT_READ_URI_PERMISSION&#10;                }&#10;                if (fileIntent.resolveActivity(packageManager) != null) {&#10;                    startActivity(fileIntent)&#10;                } else {&#10;                    Toast.makeText(this, &quot;No file manager found. File saved at: $filePath&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }&#10;        } catch (_: Exception) {&#10;            Toast.makeText(this, &quot;Cannot open file location. File saved at: $filePath&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    private fun startWifiTransfer() {&#10;        if (handshakeSecret != null) {&#10;            isSearchingDevices = true&#10;            wifiTransferHelper.setTransferListener(this)&#10;            if (isSender) {&#10;                status = &quot;Starting as sender...&quot;&#10;                wifiTransferHelper.startSender(handshakeSecret!!)&#10;            } else {&#10;                status = &quot;Starting as receiver...&quot;&#10;                wifiTransferHelper.startReceiver(handshakeSecret!!)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startFileTransfer() {&#10;        if (isSender) {&#10;            if (selectedFileUri == null || peerIpAddress == null) {&#10;                status = &quot;Missing file or peer connection&quot;&#10;                return&#10;            }&#10;&#10;            val filePath = copyUriToCache(selectedFileUri!!)&#10;            if (filePath == null) {&#10;                status = &quot;Failed to prepare file for transfer&quot;&#10;                return&#10;            }&#10;&#10;            status = &quot;Sending encrypted file...&quot;&#10;            wifiTransferHelper.sendFile(filePath, peerIpAddress!!)&#10;        } else {&#10;            status = &quot;Ready to receive encrypted file...&quot;&#10;            wifiTransferHelper.startFileReceiver(selectedSaveDirectory)&#10;        }&#10;    }&#10;&#10;    private fun copyUriToCache(uri: Uri): String? {&#10;        return try {&#10;            val fileName = getFileNameFromUri(this, uri) ?: &quot;tempfile&quot;&#10;            val file = File(cacheDir, fileName)&#10;            contentResolver.openInputStream(uri)?.use { input -&gt;&#10;                java.io.FileOutputStream(file).use { output -&gt;&#10;                    input.copyTo(output)&#10;                }&#10;            }&#10;            file.absolutePath&#10;        } catch (e: Exception) {&#10;            e.printStackTrace()&#10;            null&#10;        }&#10;    }&#10;&#10;    // WiFiTransferHelper.TransferListener implementation&#10;    override fun onTransferProgress(bytesTransferred: Long, totalBytes: Long) {&#10;        runOnUiThread {&#10;            val progress = (bytesTransferred * 100 / totalBytes).toInt()&#10;            status = &quot;Transfer progress: $progress%&quot;&#10;        }&#10;    }&#10;&#10;    override fun onTransferComplete(success: Boolean, message: String) {&#10;        runOnUiThread {&#10;            isSearchingDevices = false&#10;            status = message&#10;            if (success) {&#10;                Toast.makeText(this, &quot;Transfer completed successfully!&quot;, Toast.LENGTH_LONG).show()&#10;                resetToIdle()&#10;            } else {&#10;                Toast.makeText(this, &quot;Transfer failed: $message&quot;, Toast.LENGTH_LONG).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onPeerDiscovered(peerIp: String) {&#10;        runOnUiThread {&#10;            status = &quot;Found peer device on network: $peerIp&quot;&#10;            isSearchingDevices = false&#10;        }&#10;    }&#10;&#10;    override fun onConnectionEstablished(peerIp: String) {&#10;        runOnUiThread {&#10;            peerIpAddress = peerIp&#10;            isSearchingDevices = false&#10;            if (isSender) {&#10;                status = &quot;Connected to receiver device. Verifying secrets...&quot;&#10;            } else {&#10;                status = &quot;Connected to sender device. Verifying secrets...&quot;&#10;            }&#10;            showConfirmDialog = true&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        try {&#10;            unregisterReceiver(fileTransferReceiver)&#10;        } catch (_: Exception) {&#10;            // Receiver may not be registered&#10;        }&#10;        wifiTransferHelper.cleanup()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>